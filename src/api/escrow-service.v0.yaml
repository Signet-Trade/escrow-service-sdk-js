openapi: 3.0.3
info:
  title: Signet Trade Escrow Service
  description: TBD
  # termsOfService: TBD
  contact:
    email: partners@signet.trade
  version: 0.1.0
servers:
  - url: "https://api.signet.trade"
security:
  - signetAccessKey: []
    signetAccessSignature: []
    signetAccessTimestamp: []
tags:
  - name: templates
    description: Manage public, private, and shared templates
  - name: machines
    description: Manage active trades
paths:
  /v0/templates:
    post:
      tags:
        - templates
      summary: Create a template
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignetTopLevel'
      responses:
        '201':
          description: Template created
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Template not inserted
    get:
      tags:
        - templates
      summary: Get a list of templates
      operationId: getTemplatesList
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: owner
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of templates
          content:
            application/json:
              schema:
                type: object
                required:
                  - templates
                properties:
                  templates:
                    type: array
                    items:
                      $ref: '#/components/schemas/SignetTopLevel'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /v0/templates/{templateId}:
    get:
      tags:
        - templates
      operationId: getTemplateById
      summary: Get a specific template
      parameters:
        - $ref: "#/components/parameters/pathTemplateId"
      responses:
        '200':
          description: Template details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignetTopLevel'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Template not found
    put:
      tags:
        - templates
      summary: Update a specific template
      parameters:
        - $ref: "#/components/parameters/pathTemplateId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignetTopLevel'
      responses:
        '201':
          description: Template updated
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          description: Template not updated
    delete:
      tags:
        - templates
      summary: Delete a specific template
      parameters:
        - $ref: "#/components/parameters/pathTemplateId"
      responses:
        '202':
          description: Template marked for archival, will be deleted in 30 days
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Template not found under your account

  /v0/machines:
    post:
      summary: Create a new machine
      operationId: createMachine
      tags:
        - machines
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMachine'
      responses:
        201:
          description: Machine created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        404:
          description: Template not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        500:
          description: Machine not created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /v0/machines/{machineId}:
    get:
      summary: Retrieve a machine by its ID
      operationId: getMachine
      tags:
        - machines
      parameters:
        - $ref: "#/components/parameters/pathMachineId"
      responses:
        200:
          description: Machine retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Machine'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        404:
          description: Machine not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    put:
      summary: Update a machine by its ID
      operationId: updateMachine
      tags:
        - machines
      parameters:
        - $ref: "#/components/parameters/pathMachineId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMachine'
        required: true
      responses:
        200:
          description: Machine updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        404:
          description: Machine not found

components:
  schemas:
    CreateMachine:
      type: object
      properties:
        templateId:
          type: string
          description: ID of the template
        context:
          type: object
          description: Context data for the machine
          additionalProperties: true
        description:
          type: string
          description: Description of the machine
          nullable: true
        name:
          type: string
          description: Name of the machine
          nullable: true
      required:
        - templateId
        - context
    UpdateMachine:
      type: object
      properties:
        templateId:
          type: string
          description: ID of the template
        context:
          type: object
          additionalProperties: true
          description: Machine context
        description:
          type: string
          description: Description of the machine
        name:
          type: string
          description: Name of the machine
    MachineResponse:
      type: object
      properties:
        id:
          type: string
          description: ID of the newly created machine
        status:
          $ref: '#/components/schemas/status'
      required:
        - id
        - status
    Machine:
      type: object
      properties:
        id:
          type: string
          description: ID of the machine
        status:
          type: string
          description: Status of the machine
      required:
        - id
        - status
    SignetTopLevel:
      type: object
      properties:
        owner:
          type: string
        id:
          type: string
        name:
          type: string
        visibility:
          type: string
          enum:
            - private
            - public
        subscribers:
          type: array
          items:
            type: string
        requestSchema:
          type: object
          additionalProperties:
            type: object
            properties:
              type:
                type: string
                enum:
                  - string
                  - number
                  - boolean
                  # Other complex types should be described in separate schema objects
              required:
                type: boolean
              validation:
                oneOf:
                  - $ref: '#/components/schemas/WalletValidator'
                  - $ref: '#/components/schemas/RegexValidator'
        initialContext:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: number
              - type: array
                items:
                  type: string
              # Other complex types should be described in separate schema objects
        description:
          type: string
        initial:
          type: string
        states:
          type: string
      required:
        - id
        - owner
        - name
        - visibility
        - subscribers
        - requestSchema
        - initialContext
        - states
        - initial
    WalletValidator:
      type: object
      properties:
        type:
          type: string
          enum:
            - walletAddress
        asset:
          type: string
      required:
        - type
        - asset
    RegexValidator:
      type: object
      properties:
        type:
          type: string
          enum:
            - regex
        pattern:
          type: string
      required:
        - type
        - pattern
    CryptoWalletGenerator:
      type: object
      properties:
        type:
          type: string
          enum:
            - generateWallet
        asset:
          type: string
      required:
        - type
        - asset
    PollBlockchain:
      type: object
      properties:
        type:
          type: string
          enum:
            - pollBlockchain
        asset:
          type: string
      required:
        - type
        - asset
    GenerateWallet:
      type: object
      properties:
        type:
          type: string
          enum:
            - generateWallet
        asset:
          $ref: '#/components/schemas/CryptoCurrencyList'
      required:
        - type
        - asset
    uuid:
      type: string
      pattern: '^[0-9a-f]{24}$'
      minLength: 24
      maxLength: 24
      example: 6463b2745c41b4fac0387d0f
      description: Unique Identifier
    status:
      type: string
      enum: ['initializing', 'pending', 'first_receiving', 'half_received', 'second_receiving', 'fully_received', 'refunding', 'finalizing', 'cancelled', 'complete']
      description: The status of the escrow transaction
      example: pending
    CryptoCurrencyList:
        type: string
        description: Cryptocurrency (coin or token)
        # TODO: 'bind' this (enum) to Coin-Service via automation
        # pattern: "^[a-z0-9-]{1,9}$|^[a-z0-9-]{1,9} ([a-z0-9-]{1,9})$"
        example: usdc (erc-20)
  parameters:
    pathTemplateId:
      in: path
      name: templateId
      required: true
      schema:
        $ref: '#/components/schemas/uuid'
    pathMachineId:
      in: path
      name: machineId
      description: ID of the machine to be retrieved
      required: true
      schema:
        $ref: '#/components/schemas/uuid'
    walletAddress:
      in: path
      name: "walletAddress"
      required: true
      description: Unique Wallet Address
      schema:
        type: string
        example: "0x1111111111111111111111111111111111111111"
        pattern: "^[a-zA-Z0-9.:-]+$"
        maxLength: 256 # What is maximum length of a wallet?
        minLength: 5 # What is minimum length of a wallet?
  responses:
    NotImplemented:
      description: To Be Completed
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Not Implemented"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                description: A description of the error that occurred.
    BadRequest:
      description: Invalid Request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                description: A description of the error that occurred.
  securitySchemes:
    signetAccessKey:
      type: apiKey
      in: header
      name: X-Signet-Access-Key
      description: |
        Public API key as string
    signetAccessSignature:
      type: apiKey
      name: X-Signet-Access-Signature
      in: header
      description: |
        User Generated HMAC SHA-256 Message Signature using your API Secret
        ### Shape of message to sign
        - With a body: `${timestampHeader}${req.method.toUpperCase()}${req.path}${JSON.stringify(req.body)}`
        - Without a body `${timestampHeader}${req.method.toUpperCase()}${req.path}`
        ### NodeJS HMAC Example:
        - `const signature = createHmac('sha256', signetApiSecret).update(message).digest('hex');`
    signetAccessTimestamp:
      type: apiKey
      in: header
      name: X-Signet-Access-Timestamp
      description: |
        Number of seconds since Unix Epoch in UTC
