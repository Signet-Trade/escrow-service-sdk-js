openapi: 3.0.3
info:
  title: Signet Trade's Escrow Service
  description: |
    Describes in detail all the API operations for the Escrow Service. In addition, it provides sample requests, responses, and errors for the supported calls. [JS SDK](https://github.com/Signet-Trade/escrow-service-sdk-js)
  contact:
    name: Signet Trade
    url: https://www.signet.trade/contact
    email: partners@signet.trade
  license:
    name: "Apache 2.0"
  version: 1.0.0
servers:
  - url: "https://api.signet.trade"
security:
  - signetAccessKey: []
    signetAccessSignature: []
    signetAccessTimestamp: []
tags:
  - name: escrowTokenPresaleWithLiquidity
    description: Manage Liquidity Escrow Requests
  - name: escrowOverTheCounter
    description: Manage Over The Counter Escrow Requests
  - name: wallet
    description: Wallet Utils
paths:
  /v1/liquidity:
    post:
      summary: Create Liquidity Escrow
      description: |
        Creates a new liquidity escrow. This includes details like ownership, contribution limits, presale percentages, and more.
      operationId: createLiquidityEscrow
      tags:
        - escrowTokenPresaleWithLiquidity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - "contributor"
                - "expiration"
                - "pool"
              properties:
                expiration:
                  type: object
                  description: Escrow time period
                  properties:
                    startTime:
                      type: string
                      format: date-time
                    endTime:
                      type: string
                      format: date-time
                contributor:
                  type: object
                  properties:
                    minimum:
                      type: number
                      format: float
                      description: Minimum contribution amount
                    maximum:
                      type: number
                      format: float
                      description: Maximum contribution amount
                    softCap:
                      type: number
                      description: Cap for the presale to succeed
                    hardCap:
                      type: number
                      description: Cap for the presale to end
                pool:
                  type: object
                  properties:
                    percentPresaleAirdrop:
                      type: number
                      description: Percentage of presale for airdrop
                    percentLP:
                      type: number
                      description: Percentage for liquidity pool
                    percentFounderShare:
                      type: number
                      description: Percentage share for the founder
                    mintDetails:
                      $ref: "#/components/schemas/MintDetails"
                  required:
                    - "percentPresaleAirdrop"
                    - "percentLP"
                    - "percentFounderShare"
                    - "mintDetails"
              additionalProperties: false
      responses:
        "201":
          description: Liquidity escrow created successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - "escrowId"
                  - "escrowWalletAddresses"
                properties:
                  escrowId:
                    $ref: "#/components/schemas/ObjectId"
                  escrowWalletAddresses:
                    type: object
                    properties:
                      ethereum:
                        type: string
                        description: "[escrowTokenPresaleWithLiquidity] Signet Trade's Wallet Address For This Escrow"
                      bitcoin:
                        type: string
                        description: "[escrowTokenPresaleWithLiquidity] Signet Trade's Wallet Address For This Escrow"
                      litecoin:
                        type: string
                        description: "[escrowTokenPresaleWithLiquidity] Signet Trade's Wallet Address For This Escrow"
                      solana:
                        type: string
                        description: "Signet Trade's Wallet Address For This Escrow"
                    required:
                      - "ethereum"
                      - "bitcoin"
                      - "litecoin"
                      - "solana"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/ServerError"
  /v1/liquidity/{escrowId}:
    get:
      summary: Get Liquidity Escrow
      description: |
        Retrieves details of a specific liquidity escrow identified by the escrow ID.
      operationId: getLiquidityEscrow
      tags:
        - escrowTokenPresaleWithLiquidity
      parameters:
        - $ref: "#/components/parameters/EscrowId"
      responses:
        "200":
          description: Liquidity escrow details
          content:
            application/json:
              schema:
                type: object
                required:
                  - "escrowId"
                  - "escrowWalletAddresses"
                  - "expiration"
                  - "contributor"
                  - "pool"
                properties:
                  escrowId:
                    $ref: "#/components/schemas/ObjectId"
                  escrowWalletAddresses:
                    type: object
                    properties:
                      ethereum:
                        type: string
                        description: "[escrowTokenPresaleWithLiquidity] Signet Trade's Wallet Address For This Escrow"
                      bitcoin:
                        type: string
                        description: "[escrowTokenPresaleWithLiquidity] Signet Trade's Wallet Address For This Escrow"
                      litecoin:
                        type: string
                        description: "[escrowTokenPresaleWithLiquidity] Signet Trade's Wallet Address For This Escrow"
                      solana:
                        type: string
                        description: "Signet Trade's Wallet Address For This Escrow"
                    required:
                      - "ethereum"
                      - "bitcoin"
                      - "litecoin"
                      - "solana"
                  expiration:
                    type: object
                    description: Escrow time period
                    properties:
                      startTime:
                        type: string
                        format: date-time
                      endTime:
                        type: string
                        format: date-time
                  contributor:
                    type: object
                    properties:
                      minimum:
                        type: number
                        format: float
                        description: Minimum contribution amount
                      maximum:
                        type: number
                        format: float
                        description: Maximum contribution amount
                      softCap:
                        type: number
                        description: Cap for the presale to succeed
                      hardCap:
                        type: number
                        description: Cap for the presale to end
                  pool:
                    type: object
                    properties:
                      percentPresaleAirdrop:
                        type: number
                        description: Percentage of presale for airdrop
                      percentLP:
                        type: number
                        description: Percentage for liquidity pool
                      percentFounderShare:
                        type: number
                        description: Percentage share for the founder
                      mintDetails:
                        $ref: "#/components/schemas/MintDetails"
                    required:
                      - "percentPresaleAirdrop"
                      - "percentLP"
                      - "percentFounderShare"
                      - "mintDetails"
                additionalProperties: false
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/EscrowNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/ServerError"
  /v1/liquidity/{escrowId}/claim:
    post:
      summary: Claim Founder's Funds
      description: |
        Allows the claiming of founder share from a specific escrow.
      operationId: claimLiquidityRaise
      tags:
        - escrowTokenPresaleWithLiquidity
      parameters:
        - $ref: "#/components/parameters/EscrowId"
      requestBody:
        $ref: "#/components/requestBodies/Auth"
      responses:
        "202":
          description: Claim request received successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/EscrowNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/ServerError"
  /v1/liquidity/{escrowId}/{walletAddress}:
    get:
      summary: Get User's Contribution
      description: |
        Retrieves the liquidity contribution details for a given wallet address in a specific liquidity escrow.
      operationId: getLiquidityContribution
      tags:
        - escrowTokenPresaleWithLiquidity
      parameters:
        - $ref: "#/components/parameters/EscrowId"
        - $ref: "#/components/parameters/WalletAddress"
      responses:
        "200":
          $ref: "#/components/responses/LiquidityContributionResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/EscrowNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/ServerError"
    post:
      summary: Refund User's Contribution
      description: |
        Processes a refund for a user's contribution in a specific liquidity escrow. This includes verifying wallet authenticity and checking if the escrow exists.
      operationId: refundLiquidityContribution
      tags:
        - escrowTokenPresaleWithLiquidity
      parameters:
        - $ref: "#/components/parameters/EscrowId"
        - $ref: "#/components/parameters/WalletAddress"
      requestBody:
        $ref: "#/components/requestBodies/Auth"
      responses:
        "202":
          description: Refund request received successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/EscrowNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/ServerError"
  /v1/liquidity/{escrowId}/bind:
    post:
      summary: Bind a wallet address from one blockchain to another.
      description: >
        Allows users to bind their wallet address from one blockchain (e.g., TRON) to another (e.g., SOL) 
        for contribution reward claiming. The user must authenticate ownership of the USDT address, 
        while the SOL address is used as a claim address without authentication.
      operationId: bindWalletAddress
      tags:
        - escrowTokenPresaleWithLiquidity
      parameters:
        - $ref: "#/components/parameters/EscrowId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                usdtAddress:
                  type: string
                  description: USDT address of the user, with authentication to prove ownership.
                  example: "TExxxxxxx"
                solAddress:
                  type: string
                  description: SOL address to which rewards are claimed.
                  example: "SOLxxxxxxx"
      responses:
        "200":
          description: Successfully bound wallet addresses.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Wallet addresses bound successfully."
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/EscrowNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "500":
          $ref: "#/components/responses/ServerError"

  # WIP, is mostly copied from v0
  /v1/escrow:
    post:
      tags:
        - escrowOverTheCounter
      summary: Create an escrow transaction
      operationId: createEscrow
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OverTheCounterCondition"
      responses:
        "201":
          description: Escrow transaction created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OverTheCounterResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /v1/escrow/{escrowId}:
    get:
      tags:
        - escrowOverTheCounter
      summary: Get escrow status
      description: Get escrow status
      operationId: getEscrow
      parameters:
        - $ref: "#/components/parameters/EscrowId"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/OverTheCounterFullResponse"
                  # - $ref: '#/components/schemas/PaymentProcessorResponse' # TODO: FULL RESPONSE
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
    delete:
      tags:
        - escrowOverTheCounter
      summary: Delete an escrow transaction
      description: Deletes the escrow transaction and automatically begins the refund process
      operationId: deleteEscrow
      parameters:
        - $ref: "#/components/parameters/EscrowId"
      responses:
        "201":
          description: Escrow transaction deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /v1/otc:
    get:
      tags:
        - escrowOverTheCounter
      summary: Get all OTC trade listings
      description: Get all OTC trade listing
      operationId: getTradeListings
      parameters:
        - $ref: "#/components/parameters/buyName"
        - $ref: "#/components/parameters/sellName"
        - $ref: "#/components/parameters/tradeType"
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          description: Fetched trade listings successfully
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/OverTheCounterCreateTradeResponse"
                maxItems: 1000
                minItems: 0
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /v1/otc/{tradeId}:
    get:
      tags:
        - escrowOverTheCounter
      summary: Get an OTC trade listing
      description: Get OTC trade listing
      operationId: getTradeListingById
      parameters:
        - $ref: "#/components/parameters/TradeId"
      responses:
        "200":
          description: Fetched trade listing successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OverTheCounterCreateTradeResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
    delete:
      tags:
        - escrowOverTheCounter
      summary: Delete an OTC trade listing
      description: Delete OTC trade listing
      operationId: deleteTradeListingById
      parameters:
        - $ref: "#/components/parameters/TradeId"
        - $ref: "#/components/parameters/userIdReq"
      responses:
        "200":
          description: Deleted trade listing successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OverTheCounterTradeDeleteResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /v1/wallet/{walletAddress}:
    get:
      tags:
        - wallet
      summary: Validate a wallet address
      description: Wallet Address Validation
      operationId: validateWallet
      parameters:
        - $ref: "#/components/parameters/WalletAddress"
        - $ref: "#/components/parameters/CryptoName"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - valid
                properties:
                  valid:
                    type: boolean
                    description: Provided Wallet Address validation status
                    example: true
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

components:
  parameters:
    EscrowId:
      in: path
      name: "escrowId"
      required: true
      schema:
        $ref: "#/components/schemas/ObjectId"
    WalletAddress:
      in: path
      name: walletAddress
      required: true
      schema:
        type: string
      description: The wallet address for which the contribution details are being requested.

    # WIP, is mostly copied from v0
    CryptoName:
      in: query
      name: cryptoName
      required: true
      description: Cryptocurrency (coin or token)
      schema:
        $ref: "#/components/schemas/CryptoCurrencyList"
    TradeId:
      in: path
      name: "tradeId"
      required: true
      schema:
        $ref: "#/components/schemas/ObjectId"
    buyName:
      in: query
      name: buyName
      required: false
      description: Cryptocurrency (coin or token) that you want to buy
      schema:
        type: array
        items:
          $ref: "#/components/schemas/CryptoCurrencyList"
    sellName:
      in: query
      name: sellName
      required: false
      description: Cryptocurrency (coin or token) that you want to sell
      schema:
        type: array
        items:
          $ref: "#/components/schemas/CryptoCurrencyList"
    tradeType:
      in: query
      name: tradeType
      required: false
      description: Trade Type
      schema:
        type: string
        description: Trade Listing Type
        enum: ["take-all", "take-some"]
    userId:
      in: query
      name: userId
      required: false
      description: Trade Owner Id
      schema:
        type: string
    userIdReq:
      in: query
      name: userId
      required: true
      description: Trade Owner Id
      schema:
        type: string

  requestBodies:
    Auth:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              auth:
                $ref: "#/components/schemas/Auth"
            required:
              - auth

  responses:
    LiquidityContributionResponse:
      description: Liquidity contribution details retrieved successfully
      content:
        application/json:
          schema:
            type: object
            required:
              - "escrowId"
              - "walletAddress"
              - "contribution"
            properties:
              escrowId:
                $ref: "#/components/schemas/ObjectId"
              walletAddress:
                type: string
                description: The wallet address for which the balance is provided
              contribution:
                type: number
                format: float
                description: The contribution amount for this escrow provided by the given wallet address
                example: 1.234567891
    EscrowNotFound:
      description: Escrow not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Escrow not found"
    Created:
      description: Entity created successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    Success:
      description: Success response
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "creating"
    BadRequest:
      description: Bad request response
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                description: A description of the error that occurred.
                example: "Escrow is already complete"
    Unauthorized:
      description: Unauthorized response
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "User is unauthorized"
    TooManyRequests:
      description: Too many requests response
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Too many requests, please try again in 5 seconds"
    ServerError:
      description: Internal server error response
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Internal Server Error"

  schemas:
    MintDetails:
      type: object
      oneOf:
        - $ref: "#/components/schemas/MintExistingDetails"
        - $ref: "#/components/schemas/MintCreationDetails"
    MintExistingDetails:
      type: object
      description: Mint Details
      properties:
        contractAddress:
          type: string
          description: Contract Address
        network:
          type: string
          description: Network that this contract is on
          example: "solana"
        escrowedTokens:
          type: number
          format: float
          description: Total amount of tokens that will be escrowed
          example: 1.234567891
      required:
        - "contractAddress"
        - "network"
        - "escrowedTokens"
    MintCreationDetails:
      type: object
      description: "[escrowTokenPresaleWithLiquidity+] Mint Creation Details"
      properties:
        network:
          type: string
          description: Network that this contract is on
          example: "solana"
        escrowedTokens:
          type: number
          format: float
          description: Total amount of tokens that will be escrowed
          example: 1.234567891
        details:
          type: object
      required:
        - "network"
        - "escrowedTokens"
        - "details"
    ObjectId:
      type: string
      pattern: "^[0-9a-f]{24}$"
      minLength: 24
      maxLength: 24
      example: 6463b2745c41b4fac0387d0f
      description: MongoDB Object Identifier
    Auth:
      type: object
      required:
        - signedMessage
        - signature
        - walletAddress
      properties:
        signedMessage:
          type: string
          format: byte
          description: Signed message as a Uint8Array
        signature:
          type: string
          format: byte
          description: Signature as a Uint8Array
        walletAddress:
          type: string
          description: Wallet address associated with the request

    # Outdated, but are here to prepare for v1
    status:
      type: string
      enum:
        [
          "initializing",
          "pending",
          "first_receiving",
          "half_received",
          "second_receiving",
          "fully_received",
          "refunding",
          "finalizing",
          "cancelled",
          "complete",
        ]
      description: The status of the escrow transaction
      example: pending
    OverTheCounterCondition:
      type: object
      required:
        - condition
        - parameters
      properties:
        endpoint:
          type: string
          format: uri
          description: (optional) Endpoint which status updates will be sent
          example: https://localhost/callback
        condition:
          type: string
          enum: [over_the_counter]
          description: The condition that must be met to release the escrowed funds
          example: over_the_counter
        parameters:
          type: object
          description: Additional parameters for the transaction
          properties:
            originatingTradeId:
              type: string
              description: Originating Trade Identifier
            tradeType:
              type: string
              description: Trade Listing Type
              enum: ["take-all", "take-some"]
            cryptoOne:
              type: object
              required:
                - amount
                - name
                - providerId
                - providerName
                - receiverWalletAddress
                - userSource
                - userChannel
              properties:
                amount:
                  type: string
                  description: The transaction amount to be received by the user `new BigNumber().toString()`
                  example: "0.000001"
                name:
                  $ref: "#/components/schemas/CryptoCurrencyList"
                providerId:
                  type: string
                  description: Provider User ID (Telegram or Discord User Identifier)
                  example: "1234567890"
                providerName:
                  type: string
                  description: Provider User Name
                  example: "echo"
                providerWalletAddress:
                  description: refund address for user one
                  type: string
                  example: "0x1111111111111111111111111111111111111111"
                  pattern: "^[a-zA-Z0-9.:-]+$"
                  maxLength: 256 # What is maximum length of a wallet?
                  minLength: 5 # What is minimum length of a wallet?
                receiverWalletAddress:
                  description: receive address for user two
                  type: string
                  example: "0x1111111111111111111111111111111111111111"
                  pattern: "^[a-zA-Z0-9.:-]+$"
                  maxLength: 256 # What is maximum length of a wallet?
                  minLength: 5 # What is minimum length of a wallet?
                userSource:
                  type: string
                  enum: ["discord", "website", "telegram", "wechat"]
                  example: "discord"
                userChannel:
                  type: string
                  example: "1234567890"
            cryptoTwo:
              type: object
              required:
                - amount
                - name
                - providerId
                - providerName
                - providerWalletAddress
                - userSource
                - userChannel
              properties:
                amount:
                  type: string
                  description: The transaction amount to be received by the user `new BigNumber().toString()`
                  example: "0.000001"
                name:
                  $ref: "#/components/schemas/CryptoCurrencyList"
                providerId:
                  type: string
                  description: Provider User ID (Telegram or Discord User Identifier)
                  example: "1234567890"
                providerName:
                  type: string
                  description: Provider User Name
                  example: "echo"
                providerWalletAddress:
                  type: string
                  example: "0x1111111111111111111111111111111111111111"
                  pattern: "^[a-zA-Z0-9.:-]+$"
                  maxLength: 256 # What is maximum length of a wallet?
                  minLength: 5 # What is minimum length of a wallet?
                  description: refund address for user two
                receiverWalletAddress:
                  description: receive address for user one
                  type: string
                  example: "0x1111111111111111111111111111111111111111"
                  pattern: "^[a-zA-Z0-9.:-]+$"
                  maxLength: 256 # What is maximum length of a wallet?
                  minLength: 5 # What is minimum length of a wallet?
                userSource:
                  type: string
                  enum: ["discord", "website", "telegram", "wechat"]
                  example: "discord"
                userChannel:
                  type: string
                  example: "1234567890"
          required:
            - tradeType
            - originatingTradeId
            - cryptoOne
            - cryptoTwo
    OverTheCounterTradeDeleteResponse:
      type: object
      properties:
        tradeId:
          $ref: "#/components/schemas/ObjectId"
        status:
          $ref: "#/components/schemas/status"
    OverTheCounterCreateTradeResponse:
      type: object
      required:
        - tradeId
        - cryptoOne
        - cryptoTwo
        - tradeType
        - traders
      properties:
        tradeId:
          $ref: "#/components/schemas/ObjectId"
        cryptoOne:
          type: object
          required:
            - amount
            - name
            - providerId
            - providerWalletAddress
            - providerName
            - userSource
            - userChannel
          properties:
            amount:
              type: string
              description: The transaction amount to be received by the user `new BigNumber().toString()`
              example: "0.000001"
            name:
              $ref: "#/components/schemas/CryptoCurrencyList"
            providerId:
              type: string
              description: Provider User ID (Telegram or Discord User Identifier)
              example: "1234567890"
            providerName:
              type: string
              description: Provider User Name
              example: "echo"
            providerWalletAddress:
              description: refund address for user one
              type: string
              example: "0x1111111111111111111111111111111111111111"
              pattern: "^[a-zA-Z0-9.:-]+$"
              maxLength: 256 # What is maximum length of a wallet?
              minLength: 5 # What is minimum length of a wallet?
            userSource:
              type: string
              enum: ["discord", "website", "telegram", "wechat"]
            userChannel:
              type: string
        cryptoTwo:
          type: object
          required:
            - amount
            - name
            - receiverWalletAddress
          properties:
            amount:
              type: string
              description: The transaction amount to be received by the user `new BigNumber().toString()`
              example: "0.000001"
            name:
              $ref: "#/components/schemas/CryptoCurrencyList"
            receiverWalletAddress:
              description: receive address for user one
              type: string
              example: "0x1111111111111111111111111111111111111111"
              pattern: "^[a-zA-Z0-9.:-]+$"
              maxLength: 256 # What is maximum length of a wallet?
              minLength: 5 # What is minimum length of a wallet?
        tradeType:
          type: string
          description: Trade Listing Type
          enum: ["take-all", "take-some"]
        traders:
          type: array
          minItems: 0
          items:
            type: string
          maxItems: 128
    OverTheCounterResponse:
      type: object
      required:
        - escrowId
        - condition
        - status
        - calderaWalletAddressCryptoOne
        - calderaWalletAddressCryptoTwo
      properties:
        escrowId:
          $ref: "#/components/schemas/ObjectId"
        condition:
          type: string
          enum: [over_the_counter]
          description: The condition that must be met to release the escrowed funds
          example: over_the_counter
        status:
          $ref: "#/components/schemas/status"
        calderaWalletAddressCryptoOne:
          type: string
          description: Caldera Address to receive CryptoOne
          example: "0x12345"
        calderaWalletAddressCryptoTwo:
          type: string
          description: Caldera Address to receive CryptoTwo
          example: "0x12345"
    OverTheCounterFullResponse:
      type: object
      required:
        - status
        - escrowId
        - cryptoOne
        - cryptoTwo
      properties:
        escrowId:
          $ref: "#/components/schemas/ObjectId"
        status:
          $ref: "#/components/schemas/status"
        originatingTradeId:
          type: string
          description: Originating Trade Identifier
        tradeType:
          type: string
          description: Trade Listing Type
          enum: ["take-all", "take-some"]
        cryptoOne:
          type: object
          required:
            - amount
            - amountReceived
            - calderaStartingBalance
            - calderaWalletAddress
            - isFullyReceived
            - name
            - providerId
            - providerName
            - providerWalletAddress
            - receiverWalletAddress
            - transactionConfirmations
            - transactionId
            - userSource
            - userChannel
            - requestedRefund
          properties:
            amount:
              type: string
              description: The transaction amount to be received by the user `new BigNumber().toString()`
              example: "0.000001"
            amountReceived:
              type: string
              description: The transaction amount Caldera has received `new BigNumber().toString()`
              example: "0.000001"
            isFullyReceived:
              type: boolean
              description: Has Caldera fully received crypto from the provider?
              example: false
            calderaStartingBalance:
              type: string
              description: The starting balance of this Caldera Wallet `new BigNumber().toString()`
              example: "0.000001"
            calderaWalletAddress:
              description: Caldera receive wallet address
              type: string
              example: "0x1111111111111111111111111111111111111111"
              pattern: "^[a-zA-Z0-9.:-]+$"
              maxLength: 256 # What is maximum length of a wallet?
              minLength: 5 # What is minimum length of a wallet?
            name:
              $ref: "#/components/schemas/CryptoCurrencyList"
            providerId:
              type: string
              description: Provider User ID (Telegram or Discord User Identifier)
              example: "1234567890"
            providerName:
              type: string
              description: Provider User Name
              example: "echo"
            providerWalletAddress:
              description: refund address for user one
              type: string
              example: "0x1111111111111111111111111111111111111111"
              pattern: "^[a-zA-Z0-9.:-]+$"
              maxLength: 256 # What is maximum length of a wallet?
              minLength: 5 # What is minimum length of a wallet?
            receiverWalletAddress:
              description: receive address for user two
              type: string
              example: "0x1111111111111111111111111111111111111111"
              pattern: "^[a-zA-Z0-9.:-]+$"
              maxLength: 256 # What is maximum length of a wallet?
              minLength: 5 # What is minimum length of a wallet?
            transactionConfirmations:
              type: number
              example: 0
              pattern: "^[0-9]+$"
            transactionId:
              type: string
              pattern: "^[a-zA-Z0-9]+$"
              maxLength: 512
              minLength: 1
            userSource:
              type: string
              enum: ["discord", "website", "telegram", "wechat"]
            userChannel:
              type: string
            requestedRefund:
              type: boolean
        cryptoTwo:
          type: object
          required:
            - amount
            - amountReceived
            - calderaStartingBalance
            - calderaWalletAddress
            - isFullyReceived
            - name
            - providerId
            - providerName
            - providerWalletAddress
            - receiverWalletAddress
            - transactionConfirmations
            - transactionId
            - userSource
            - userChannel
            - requestedRefund
          properties:
            amount:
              type: string
              description: The transaction amount to be received by the user `new BigNumber().toString()`
              example: "0.000001"
            amountReceived:
              type: string
              description: The transaction amount to be received by the user `new BigNumber().toString()`
              example: "0.000001"
            isFullyReceived:
              type: boolean
              description: Has Caldera fully received crypto from the provider?
              example: false
            calderaStartingBalance:
              type: string
              description: The starting balance of this Caldera Wallet `new BigNumber().toString()`
              example: "0.000001"
            calderaWalletAddress:
              description: Caldera receive wallet address
              type: string
              example: "0x1111111111111111111111111111111111111111"
              pattern: "^[a-zA-Z0-9.:-]+$"
              maxLength: 256 # What is maximum length of a wallet?
              minLength: 5 # What is minimum length of a wallet?
            name:
              $ref: "#/components/schemas/CryptoCurrencyList"
            providerId:
              type: string
              description: Provider User ID (Telegram or Discord User Identifier)
              example: "1234567890"
            providerName:
              type: string
              description: Provider User Name
              example: "echo"
            providerWalletAddress:
              description: refund address for user two
              type: string
              example: "0x1111111111111111111111111111111111111111"
              pattern: "^[a-zA-Z0-9.:-]+$"
              maxLength: 256 # What is maximum length of a wallet?
              minLength: 5 # What is minimum length of a wallet?
            receiverWalletAddress:
              description: receive address for user one
              type: string
              example: "0x1111111111111111111111111111111111111111"
              pattern: "^[a-zA-Z0-9.:-]+$"
              maxLength: 256 # What is maximum length of a wallet?
              minLength: 5 # What is minimum length of a wallet?
            transactionConfirmations:
              type: number
              example: 0
              pattern: "^[0-9]+$"
            transactionId:
              type: string
              pattern: "^[a-zA-Z0-9]+$"
              maxLength: 512
              minLength: 1
            userSource:
              type: string
              enum: ["discord", "website", "telegram", "wechat"]
            userChannel:
              type: string
            requestedRefund:
              type: boolean
    CryptoCurrencyList:
      type: string
      description: Cryptocurrency (coin or token)
      # TODO: 'bind' this (enum) to Coin-Service via automation
      # pattern: "^[a-z0-9-]{1,9}$|^[a-z0-9-]{1,9} ([a-z0-9-]{1,9})$"
      example: usdc (erc-20)
    DeleteResponse:
      additionalProperties: false
      required:
        - condition
        - escrowId
        - status
      properties:
        condition:
          type: string
          enum: [over_the_counter, payment_processor, custom_condition]
          description: The condition that must be met to release the escrowed funds
          example: over_the_counter
        escrowId:
          $ref: "#/components/schemas/ObjectId"
        status:
          $ref: "#/components/schemas/status"

  securitySchemes:
    signetAccessKey:
      type: apiKey
      in: header
      name: X-Signet-Access-Key
      description: |
        Handled automatically by Signet Trade's SDKs
        ===
        Public API key as string
    signetAccessSignature:
      type: apiKey
      name: X-Signet-Access-Signature
      in: header
      description: |
        Handled automatically by Signet Trade's SDKs
        ===
        User Generated HMAC SHA-256 Message Signature using your API Secret
        ### Shape of message to sign
        - With a body: `${timestampHeader}${req.method.toUpperCase()}${req.path}${JSON.stringify(req.body)}`
        - Without a body `${timestampHeader}${req.method.toUpperCase()}${req.path}`
        ### NodeJS HMAC Example:
        - `const signature = createHmac('sha256', signetApiSecret).update(message).digest('hex');`
    signetAccessTimestamp:
      type: apiKey
      in: header
      name: X-Signet-Access-Timestamp
      description: |
        Handled automatically by Signet Trade's SDKs
        ===
        Number of seconds since Unix Epoch in UTC
